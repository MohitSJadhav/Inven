import React, { useState } from "react";
import { Segment, FormField, Form, FormButton, Dropdown, FormDropdown, DropdownItem, FormSelect, FormTextArea } from 'semantic-ui-react';
import 'semantic-ui-css/semantic.min.css';
import axios from 'axios';
import { useForm } from "react-hook-form";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider"
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DemoContainer } from '@mui/x-date-pickers/internals/demo';
import Select from '@mui/material/Select';
import { FormControl, MenuItem, Input, InputLabel } from "@mui/material";
import moment from "moment";

// vulnerabilityid VARCHAR(255) PRIMARY KEY,
// description VARCHAR(255),
// vulnerabilityname VARCHAR(255),
// detectiondate DATETIME,
// severity VARCHAR(255),
// status VARCHAR(255)

export default function AddVulnerability() {

    const { register, handleSubmit, control, getValues, formState: { errors } } = useForm()
    const [dateValue, setDateValue] = useState("");
    const [vulnerability_status, setVulStatus] = useState("");
    const [severity, setSeverity] = useState("");
    const formFieldWidth = 4;

    const onSubmit = async (data) => {
        if (dateValue === "") {
            alert("Exception expiry date required!")
            return
        }
        const formData = new FormData();
        Object.entries(data).forEach(([key, value]) => {
            formData.append(key, value);
        });
        formData.append("severity", severity);
        formData.append("status", vulnerability_status);
        formData.append("detectiondate", moment(new Date(dateValue).toLocaleString()).format("YYYY-MM-DD"));
        const jsonData = JSON.stringify(Object.fromEntries(formData));
        console.log("Json Data: " + jsonData);
        console.log(new Date(dateValue).toISOString())
        let response
        try {
            response = await axios.post('http://localhost:8081/api/v1/inventory/vulnerability/create', jsonData);
            console.log(response.data);
            if (response.status === 200) {
                alert("Added vulnerability to Inventory");
            }
        } catch (error) {
            if (error.response.status === 400) {
                alert("Please check if all fields are valid. Maybe vulnerability with same name already exists");
            }
            if (error.response.status === 500) {
                alert("Internal error! Please try again");
            }
            else {
                console.log(error);
            }
        }
    };

    const handleVulStatus = (e) => setVulStatus(e.target.value)
    const handleSeverity = (e) => setSeverity(e.target.value)
    const handleDate = (e) => setDateValue(e)

    return (
        <Segment padded="very">
            <Form onSubmit={handleSubmit(onSubmit)}>
                <FormField width={formFieldWidth} required={true}>
                    <label>Vulnerability Name</label>
                    <input
                        placeholder="ex: Phishing"
                        type='text'
                        {...register("vulnerabilityname", { required: true })} // pattern: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/ 
                    />
                    {errors.vulnerabilityname && <p className="ui negative mini message">valid name required</p>}
                </FormField>

                <FormField width={formFieldWidth} required={true}>
                    <label>Description</label>
                    <input
                        placeholder="The reason/information of vulnerability is ..."
                        type='text'
                        {...register("description", { required: true })}
                    />
                    {errors.description && <p className="ui negative mini message">required</p>}
                </FormField>

                <div>
                    <FormControl variant="standard" sx={{ m: 1, width: "25%" }}>
                        <InputLabel id="vulnerability_status_input_label">Vulnerability Status</InputLabel>
                        <Select
                            labelId="Status"
                            required={true}
                            slotProps={{
                                textField: {
                                    required: true,
                                },
                            }}
                            value={vulnerability_status}
                            onChange={handleVulStatus}
                            label="Status"
                        >
                            <MenuItem value={"received"}>Received</MenuItem>
                            <MenuItem value={"awaiting_analysis"}>Awaiting Analysis</MenuItem>
                            <MenuItem value={"analyzed"}>Analyzed</MenuItem>
                            <MenuItem value={"published"}>Published</MenuItem>
                            <MenuItem value={"reject"}>Reject</MenuItem>
                            <MenuItem value={"reserved"}>Reserved</MenuItem>
                        </Select>
                    </FormControl>
                    <br></br>
                </div>

                <div>
                    <FormControl variant="standard" sx={{ m: 1, width: "25%" }}>
                        <InputLabel id="serverity_input_label">Severity</InputLabel>
                        <Select
                            labelId="Severity"
                            required={true}
                            slotProps={{
                                textField: {
                                    required: true,
                                },
                            }}
                            value={severity}
                            onChange={handleSeverity}
                            label="Severity"
                        >
                            <MenuItem value={"low"}>Low</MenuItem>
                            <MenuItem value={"medium"}>Medium</MenuItem>
                            <MenuItem value={"high"}>High</MenuItem>
                            <MenuItem value={"critical"}>Critical</MenuItem>
                        </Select>
                    </FormControl>
                    <br></br>
                    <br></br>
                </div>

                <LocalizationProvider dateAdapter={AdapterDayjs}>
                    <DemoContainer components={['DateTimeField']}>
                        <DatePicker
                            slotProps={{
                                textField: {
                                    required: true,
                                },
                            }}
                            format="YYYY/DD/MM"
                            label="Detection Date"
                            value={dateValue}
                            onChange={handleDate}
                            sx={{ width: '25%' }}
                        />
                    </DemoContainer>
                </LocalizationProvider>
                <br></br>

                <FormButton primary fluid width={2} type='submit'>Create Vulnerability</FormButton>
            </Form >
        </Segment >
    );
}