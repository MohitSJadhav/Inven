import React, { useState } from "react";
import { Dropdown, DropdownItem, Segment, FormField, Form, FormButton } from 'semantic-ui-react';
import 'semantic-ui-css/semantic.min.css';
import axios from 'axios';
import { useForm } from 'react-hook-form';
import { LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DemoContainer } from "@mui/x-date-pickers/internals/demo";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";

import dayjs from "dayjs";

export default function UpdateVulnerability() {
    const tagOptions = [
        {
            key: 'vulnerabilityid',
            text: 'Vulnerability ID',
            value: 'vulnerabilityid',
        },
    ]

    // State for search field and selected option
    const [searchFilterValue, setSearchFilterValue] = useState('exception_id');
    const [searchValue, setSearchValue] = useState("");
    const [response, setResponseData] = useState("");
    const [dateValue, setDateValue] = useState("");
    const [severity, setSeverity] = useState("");

    const { register, handleSubmit, setValue, formState: { errors } } = useForm()
    const formFieldWidth = 4;

    const handleSearchValue = (event) => {
        setSearchValue(event.target.value);
    };

    const handleDate = (newValue) => {
        let formattedDate = dateFunc(newValue)
        console.log(formattedDate); // Outputs: 2024-01-06
        setDateValue(formattedDate);
    }
    function dateFunc(datee) {
        let date = new Date(datee);
        let year = date.getFullYear();
        let month = ('0' + (date.getMonth() + 1)).slice(-2); // Months are 0-indexed in JavaScript
        let day = ('0' + date.getDate()).slice(-2);
        let formattedDate = `${year}-${month}-${day}`;
        return formattedDate
    }

    const onSubmit = async (event) => {
        event.preventDefault();
        console.log("search value " + searchFilterValue);

        if (searchValue === "" || searchFilterValue === "") {
            alert('Missing search value. Try searching again!');
        } else {
            try {
                const queryresponse = await axios.get(`http://localhost:8081/api/v1/inventory/vulnerability/search?parameter=${searchValue.toLowerCase()}&filter=${searchFilterValue.toLowerCase()}`);
                if (queryresponse.status === 200) {
                    console.log((JSON.stringify(queryresponse.data[0])));
                    setResponseData(JSON.parse(JSON.stringify(queryresponse)));

                    setValue("vulnerabilityname", queryresponse.data[0].vulnerabilityname);
                    setValue("description", queryresponse.data[0].description);
                    setValue("status", queryresponse.data[0].status);
                    setDateValue(dayjs(queryresponse.data[0].detectiondate));
                    // setDateValue(dateFunc(queryresponse.data[0].detectiondate));
                    setValue("severity", queryresponse.data[0].severity);
                } else {
                    console.error(queryresponse.status);
                }
            } catch (error) {

            }
        }
    };

    const handleUpdateSubmit = async (data) => {
        const formData = new FormData();
        Object.entries(data).forEach(([key, value]) => {
            formData.append(key, value);
        });
        formData.append("vulnerability_id", searchValue)
        formData.append("detectiondate", dateValue)
        const jsonData = JSON.stringify(Object.fromEntries(formData));
        console.log("Json Data: " + jsonData);
        try {
            const response = await axios.put('http://localhost:8081/api/v1/inventory/vulnerability/update', jsonData);
            console.log(response.data);
            if (response.status === 200) {
                alert("Updated Vulnerability successfully!");
            }
        } catch (error) {
            if (error.response.status === 400) {
                alert("Please check if all fields are valid. Maybe vulnerability with same name already exists");
            }
            if (error.response.status === 500) {
                alert("Internal error! Please try again");
            }
            else {
                console.log(error);
            }
        }
    };

    return (<>
        <Segment>
            <Form onSubmit={onSubmit}>
                <div>
                    <Dropdown
                        text='Search By'
                        icon='filter'
                        labeled
                        button
                        floating
                        className='icon'
                        options={tagOptions.map((option) => (<DropdownItem key={option.value} {...option} />))}
                        onChange={(e, data) => setSearchFilterValue(data.value)}
                    />
                </div>
                <br />
                <FormField width={5} required={true}>
                    <input
                        placeholder={"Enter Vulnerability ID"}
                        type='text'
                        id="vulnerabilityid"
                        value={searchValue}
                        onChange={handleSearchValue}
                    />
                </FormField>
                <FormButton primary fluid width={2} type='submit' name="button">Search Vulnerability</FormButton>
            </Form>
        </Segment>
        <Segment padded="very">
            <Form onSubmit={handleSubmit(handleUpdateSubmit)}>
                <FormField width={formFieldWidth} required={true}>
                    <label>Vulnerability Name</label>
                    <input
                        placeholder="ex: Server Hack"
                        type='text'
                        {...register("vulnerabilityname", { required: true })}
                    />
                    {errors.vulnerabilityname && <p className="ui negative mini message">Vulnerability Name required</p>}
                </FormField>

                <FormField width={formFieldWidth} required={true}>
                    <label>Description</label>
                    <input
                        placeholder="The reason/information of vulnerability is ..."
                        type='text'
                        {...register("description", { required: true })}
                    />
                    {errors.description && <p className="ui negative mini message">required</p>}
                </FormField>

                <FormField width={formFieldWidth} required={true}>
                    <label>Status</label>
                    <input
                        placeholder="received,awaiting_analysis,analyzed,published,reject,reserved"
                        type='text'
                        {...register("status", { required: true, pattern: /^(?:received|awaiting_analysis|analyzed|published|reject|reserved)$/ })}
                    />
                    {errors.status && <p className="ui negative mini message">status of vulnerability- received,awaiting_analysis,analyzed,published,reject,reserved</p>}
                </FormField>

                <FormField width={formFieldWidth} required={true}>
                    <label> Severity</label>
                    <input
                        placeholder="low,medium,high,critical"
                        type='text'
                        {...register("severity", { required: true, pattern: /^(?:low|medium|high|critical)$/ })}
                    />
                    {errors.severity && <p className="ui negative mini message">severity of vulnerability required</p>}
                </FormField>

                <LocalizationProvider dateAdapter={AdapterDayjs}>
                    <DemoContainer components={['DateTimeField']}>
                        <DatePicker
                            slotProps={{
                                textField: {
                                    required: true,
                                },
                            }}
                            format="YYYY/DD/MM"
                            label="Detection Date"
                            value={dateValue}
                            onChange={handleDate}
                            sx={{ width: '25%' }}
                        />
                    </DemoContainer>
                </LocalizationProvider>
                <br></br>

                <FormButton primary fluid width={2} type='submit'>Submit</FormButton>
            </Form>
            <br></br>
        </Segment>
    </>
    );
}


